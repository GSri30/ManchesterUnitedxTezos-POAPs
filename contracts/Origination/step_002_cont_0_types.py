import smartpy as sp

tstorage = sp.record(administrator = sp.address, balances = sp.big_map(sp.address, sp.record(approvals = sp.map(sp.address, sp.nat), balance = sp.nat).layout(("approvals", "balance"))), metadata = sp.big_map(sp.string, sp.bytes), paused = sp.bool, token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info"))), total_supply = sp.nat).layout(("administrator", ("balances", ("metadata", ("paused", ("token_metadata", "total_supply"))))))
tparameter = sp.variant(approve = sp.record(spender = sp.address, value = sp.nat).layout(("spender", "value")), burn = sp.record(address = sp.address, value = sp.nat).layout(("address", "value")), getAdministrator = sp.pair(sp.unit, sp.contract(sp.address)), getAllowance = sp.pair(sp.record(owner = sp.address, spender = sp.address).layout(("owner", "spender")), sp.contract(sp.nat)), getBalance = sp.pair(sp.address, sp.contract(sp.nat)), getTotalSupply = sp.pair(sp.unit, sp.contract(sp.nat)), mint = sp.record(address = sp.address, value = sp.nat).layout(("address", "value")), setAdministrator = sp.address, setPause = sp.bool, transfer = sp.record(from_ = sp.address, to_ = sp.address, value = sp.nat).layout(("from_ as from", ("to_ as to", "value"))), update_metadata = sp.record(key = sp.string, value = sp.bytes).layout(("key", "value"))).layout(((("approve", "burn"), ("getAdministrator", ("getAllowance", "getBalance"))), (("getTotalSupply", ("mint", "setAdministrator")), ("setPause", ("transfer", "update_metadata")))))
tprivates = { "is_administrator_": sp.lambda_(sp.address, sp.bool, with_storage="read-only", tstorage=sp.record(administrator = sp.address, balances = sp.big_map(sp.address, sp.record(approvals = sp.map(sp.address, sp.nat), balance = sp.nat).layout(("approvals", "balance"))), metadata = sp.big_map(sp.string, sp.bytes), paused = sp.bool, token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info"))), total_supply = sp.nat).layout(("administrator", ("balances", ("metadata", ("paused", ("token_metadata", "total_supply"))))))), "is_paused_": sp.lambda_(sp.unit, sp.bool, with_storage="read-only", tstorage=sp.record(administrator = sp.address, balances = sp.big_map(sp.address, sp.record(approvals = sp.map(sp.address, sp.nat), balance = sp.nat).layout(("approvals", "balance"))), metadata = sp.big_map(sp.string, sp.bytes), paused = sp.bool, token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info"))), total_supply = sp.nat).layout(("administrator", ("balances", ("metadata", ("paused", ("token_metadata", "total_supply"))))))) }
tviews = { "get_administrator": ((), sp.address), "token_metadata": (sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info"))) }
